export const onReceiveMeetingList= (socketIo) =>{
    socketIo.on('meetingList',msg=>{
        console.log("SOOOOKKKEETTT listmeeting>>>>", msg)
        if(getSession(AppConfig.sessionMeeting) !== 'host'){
          const listParticipant=msg.meetingList 
          store.dispatch(SocketActions.getListParticipant({listParticipant}))
        }
    })
}
//On end meeting
export const onMeetingEnd = (socketIo) =>{
    socketIo.on('endMeeting',msg=>{
        console.log("SOOOOKKKEETTT end meeting>>>>", msg)  
    })
}
  // listening to meeting error
export const onMeetingError = (socketIo) =>{
  socketIo.on('meetingError', (msg) => {
      Swal.fire({
        title: 'Failed Join to Meeting',
        text: msg,
        icon: 'error',
        confirmButtonText: 'Ok',
        onClose: () => store.dispatch(JoinActions.joinMeetingDone())
      })
    })
}
  
export const onDisconnect= (socketIo) =>{
  socketIo.on('disconnect', () => {
    console.log("SOOOOKKKEETTT ta diskonek>>>", socketIo.disconnected);
  });
}
export const onReconnecting = (socketIo) =>{
  socketIo.on('reconnecting', (e) => {
    console.log("SOOOOKKKEETTT rekonekting>>>", e);
  });
}
export const onConnectError = (socketIo) =>{
  socketIo.on('connect_error', (error) => {
    console.log("SOOOOKKKEETTT konek error>>>", error);
  });
}
export const onError = (socketIo) =>{
  socketIo.on('error', (error) => {
    console.log("SOOOOKKKEETTT error>>", error)
  });
}


///client listener

 socketIo.on('needPermission', async(msg) => {
        console.log("SOOOOKKKEETTT needpermission>>>>", msg)
        // console.log('session meeting>>>>>>',getSession(AppConfig.sessionMeeting));
        // console.log('session user>>>>>>',getSession(AppConfig.sessionUserData));
        // if anonymous || not, need permission
        if (msg.message == "Waiting for host approval"){
          store.dispatch(JoinActions.joinMeetingDone({isNeedPermissionToJoin: true}))
          await setSession({
            [AppConfig.sessionMeeting]: {
              title:msg.meetingTitle,
              userId:getSession(AppConfig.sessionUserData).id||msg.userId, //get from session or socket
            }
          })
        }
        //auth/not, doesn't need permission
        else {
          console.log('doesn\'t need permission');
          const {meetingId} = await store.getState().joinmeeting
          await setSession({
            [AppConfig.sessionMeeting]: {
              title:msg.title,
              userId:getSession(AppConfig.userData).id||msg.userId, //get from session or socket
              fullName:getSession(AppConfig.userData).fullName||getSession(AppConfig.sessionMeeting).fullName,
              meetingId,
              role: 'participant'
            }
          })  
          console.log('session meeting 3>>>>>>',getSession(AppConfig.sessionMeeting)); 
          // window.location = '/concal/' + meetingId
        }
      })




       socketIo.on('userPermission', async(msg) => {
      console.log("SOOOOKKKEETTT User permission soket>>", msg)

      const meetingData=getSession(AppConfig.sessionMeeting)

        if(meetingData.userId === msg.userId){ 
            const meetingData=getSession(AppConfig.sessionMeeting) 
            // returend data {userId,fullName,meetingId,needRequestToJoin,role}
            const meetingId = store.getState().streaming.meetingId
        
            if (msg.message === 'REJECT') {
              await store.dispatch(JoinActions.joinMeetingDone({isNeedPermissionToJoin: false}))
              await Swal.fire({
                title: 'Failed to Join Meeting',
                text: 'Sorry your request to join has been rejected by host',
                icon: 'error',
                confirmButtonText: 'Ok',
              })
            } 
            else
            {
              const meetingData=getSession(AppConfig.sessionMeeting) 
              const userData = getSession(AppConfig.sessionUserData)
              await setSession({
                [AppConfig.sessionMeeting]: {
                  userId:userData.id||msg.userId,
                  fullName:userData.fullName||meetingData.fullName,
                  meetingId: msg.meetingId,
                  role: msg.role
                }
              })
              window.location = '/concal/' + msg.meetingId
            }
        }
        else if(msg.message === 'ADMIT'){
          console.log('ON ADMITTT????');
          if(_.isEmpty(getSession(AppConfig.sessionMeeting).meetingId)){
            await store.dispatch(JoinActions.joinMeetingDone({isNeedPermissionToJoin: false}))
            await setSession({
              [AppConfig.sessionMeeting]: {
                title:msg.meetingTitle,
                userId:getSession(AppConfig.sessionUserData).id||msg.userId, //get from session or 
                role:'participant',
                meetingId:msg.meetingId
              }
            }) 
            window.location = '/concal/' + msg.meetingId
          }
        } 

      })

//host listener

 socketIo.on('userHasJoinMeeting', async(msg) => {
      console.log("SOOOOKKKEETTT User has join meeting>>>>", msg)
      if(getSession(AppConfig.sessionMeeting).role !== 'host'){
        const {listParticipant} = store.getState().streaming
      
        let lstParticipant = []
        //push to participant list
        lstParticipant.push(listParticipant)
        lstParticipant.push(msg)
        store.dispatch(SocketActions.addParticipant({
          listParticipant: _.flatten(lstParticipant)
        }))
      }
  })

   socketIo.on('sendRequestToHost', async(msg) => {
        console.log("SOOOOKKKEETTT User joined>>>>", msg)
        if(getSession(AppConfig.sessionMeeting).role === 'host'){
          const {listParticipant, listWaitingRoom} = store.getState().streaming
          let list = []
          list.push(msg)
          list.push(listWaitingRoom)
          store.dispatch(SocketActions.addParticipant({
            listWaitingRoom: _.flatten(list)
          }))
        }
      })

      socketIo.on('succeessfullyAdmit', (msg) => {
        console.log("SOOOOKKKEETTT admitted>>>>", msg)
        // const {listParticipant, listWaitingRoom, listOnJoining} = store.getState().streaming
        // //pop from joining list
        // let list=[]
        // store.dispatch(SocketActions.putToJoiningList({
        //     listOnJoining: _.flatten(list.filter(r=> r != msg.userId ))
        // }))

        // let lstWaiting = []        
        // lstWaiting.push(listWaitingRoom)
        // store.dispatch(SocketActions.addParticipant({
        //   listWaitingRoom: _.flatten(lstWaiting).filter(e=>e.userId != msg.userId)
        // }))
      
        // let lstParticipant = []
        // //push to participant list
        // lstParticipant.push(listParticipant)
        // lstParticipant.push(msg)
        // store.dispatch(SocketActions.addParticipant({
        //   listParticipant: _.flatten(lstParticipant)
        // }))
      })

       socketIo.on('successfullyReject', (msg) => {
        console.log("SOOOOKKKEETTT rejected>>>>", msg)
        const {listParticipant, listWaitingRoom} = store.getState().streaming
        let list = []
        //pop from waitinglist
        list.push(listWaitingRoom)
        store.dispatch(SocketActions.kickParticipant({
          listWaitingRoom: _.flatten(list).filter(e=>e.userId != msg.userId)
        }))
      })

      socketIo.on('newWaitingList',msg=>{
        console.log("SOOOOKKKEETTT waitinglist>>>>", msg)
        if(isValuePropertyExist({obj:getSession(AppConfig.sessionMeeting),propName:'role',type:'valueOnly',value:'host'})){
        console.log("DISPATCH waitinglist>>>>")
        const listWaitingRoom=msg
        store.dispatch(SocketActions.getListParticipant({listWaitingRoom}))
        }
    })